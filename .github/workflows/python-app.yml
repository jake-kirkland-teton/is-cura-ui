# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]
    container: ultimaker/cura-build-environment 
    steps:
    - name: Checkout SmartSlice
      uses: actions/checkout@v2
    - name: Check out my other private repo
      uses: actions/checkout@master
      with:
        repository: Ultimaker/Cura
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build
      run: |
        docker/build.sh
        set -e
        set -u

        export OLD_PWD=`pwd`
        export CMAKE=/c/software/PCL/cmake-3.0.1-win32-x86/bin/cmake.exe
        export MAKE=mingw32-make.exe
        export PATH=/c/mingw-w64/i686-4.9.2-posix-dwarf-rt_v3-rev1/mingw32/bin:$PATH

        mkdir -p /c/software/protobuf/_build
        cd /c/software/protobuf/_build
        $CMAKE ../
        $MAKE install

        mkdir -p /c/software/libArcus/_build
        cd /c/software/libArcus/_build
        $CMAKE ../
        $MAKE install

        mkdir -p /c/software/PinkUnicornEngine/_build
        cd /c/software/PinkUnicornEngine/_build
        $CMAKE ../
        $MAKE

        cd $OLD_PWD
        export PYTHONPATH=`pwd`/../libArcus/python:/c/Software/Uranium/
        /c/python34/python setup.py py2exe

        cp /c/software/PinkUnicornEngine/_build/CuraEngine.exe dist/
        cp /c/software/libArcus/_install/bin/libArcus.dll dist/
        cp /c/mingw-w64/i686-4.9.2-posix-dwarf-rt_v3-rev1/mingw32/bin/libgcc_s_dw2-1.dll dist/
        cp /c/mingw-w64/i686-4.9.2-posix-dwarf-rt_v3-rev1/mingw32/bin/libwinpthread-1.dll dist/
        cp /c/mingw-w64/i686-4.9.2-posix-dwarf-rt_v3-rev1/mingw32/bin/libstdc++-6.dll dist/

        /c/program\ files\ \(x86\)/NSIS/makensis.exe installer.nsi  
  
  
    - name: smartslice tests
      run: |
         python cura_app.py --headless    

